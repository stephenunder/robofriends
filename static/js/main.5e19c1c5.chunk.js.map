{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchField","initialStateRobots","isPending","robots","Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","map","user","i","components_Card","key","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","info","setState","children","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","nextProps","nextState","components_CounterButton","Scroll","style","overflowY","border","height","SearchBox","searchChange","aria-label","type","placeholder","onChange","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5e19c1c5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // could also use spread operator: return { ...state, { searchField: action.payload }}\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state;\n  }\n}","import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n    ); \n}\n\nexport default Card;","import Card from \"./Card\";\nimport React from \"react\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n              key={user.id} \n              id={user.id} \n              name={user.name}\n              // example below using robots[index] syntax \n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops, not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, { PureComponent } from \"react\";\n\nclass CounterButton extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  // PureComponent does this as a shallow comparison automatically\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   if (this.state.count !== nextState.count) {\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  updateCount = () => {\n    this.setState(state => {\n      return {count: this.state.count + 1}\n    })\n  }\n  \n  render() {\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;","import React, { Component } from \"react\";\n\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: \"scroll\", border: \"3px solid black\", height: \"800px\" }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\" \n        type=\"search\" \n        placeholder=\"search Robots...\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import \"./App.css\";\n\nimport React, { Component } from \"react\";\nimport { requestRobots, setSearchField } from \"../actions\";\n\nimport CardList from \"../components/CardList\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport Header from \"../components/Header\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n      return isPending ?\n      <h1 className=\"tc\">Loading</h1> :\n      (\n        <div className=\"tc\">\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import './index.css';\nimport \"tachyons\";\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { requestRobots, searchRobots } from \"./reducers\";\n\nimport App from \"./containers/App\";\nimport { Provider } from \"react-redux\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}